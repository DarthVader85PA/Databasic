<?xml version="1.0"?>
<doc>
<assembly>
<name>
Database
</name>
</assembly>
<members>
<member name="T:Database.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Database.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Database.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Database.Model">
 <summary>
 Active record base class for database models.
 All properties and fields in class extended from this class should be 
 named in the same case sensitive way as columns are named in database.
 Choose fields and properties types to fit into database types.
 </summary>
</member>
<member name="F:Database.Model.touched">
 <summary>
 Properties with values and fields with values touched by indexer.
 </summary>
</member>
<member name="F:Database.Model._store">
 <summary>
 Reserve store to store anything what has been not specified by any property or field.
 </summary>
</member>
<member name="F:Database.Model._internalChange">
 <summary>
 Internal switch for setuping values by methods .ToXxxxx() to not fill touched dictionary.
 </summary>
</member>
<member name="P:Database.Model.Item(System.String)">
 <summary>
 Default member to get any model value by indexer.
 </summary>
 <param name="key"></param>
 <returns></returns>
</member>
<member name="M:Database.Model.get(System.String)">
 <summary>
 Get any property, field or reserve store record.
 </summary>
 <param name="key">Property, field or reserve store value name.</param>
 <returns></returns>
</member>
<member name="M:Database.Model.set(System.String,System.Object)">
 <summary>
 Set any property, field or reserve store value.
 </summary>
 <param name="key">Property, field or reserve store key.</param>
 <param name="value">Property, field or reserve store value.</param>
</member>
<member name="M:Database.Model.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
 <summary>
 Internal overloading method for DynamicObject.
 </summary>
 <param name="binder"></param>
 <param name="result"></param>
 <returns></returns>
</member>
<member name="M:Database.Model.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
 <summary>
 Internal overloading method for DynamicObject.
 </summary>
 <param name="binder"></param>
 <param name="value"></param>
 <returns></returns>
</member>
<member name="M:Database.Model.setField(System.String,System.Object,System.Reflection.FieldInfo)">
 <summary>
 Set field setter method - called from indexer set block.
 </summary>
 <param name="key"></param>
 <param name="rawValue"></param>
 <param name="fieldInfo"></param>
</member>
<member name="M:Database.Model.setProperty(System.String,System.Object,System.Reflection.PropertyInfo)">
 <summary>
 Set property setter method - called from indexer set block.
 </summary>
 <param name="key"></param>
 <param name="rawValue"></param>
 <param name="propertyInfo"></param>
</member>
<member name="M:Database.Model.ToInstance``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Create new instance by generic type and set up all called dictionary keys into new instance properties or fields.
 </summary>
 <typeparam name="ResultType">New instance type.</typeparam>
 <param name="data">Data with values for new instance properties and fields.</param>
 <returns>New instance by generic type with values by second param.</returns>
</member>
<member name="M:Database.Model.ToInstance``1(System.Data.Common.DbDataReader,System.Boolean)">
 <summary>
 Create new instance by generic type and set up all called reader columns with one row at minimal into new instance properties or fields.
 If reader has no rows, Nothing is returned.
 </summary>
 <typeparam name="ResultType">New instance type.</typeparam>
 <param name="reader">Reader with values for new instance properties and fields</param>
 <param name="closeReaderAfterSetUp">Automaticly close reader after all.</param>
 <returns></returns>
</member>
<member name="M:Database.Model.ToList``1(System.Data.Common.DbDataReader,System.Boolean)">
 <summary>
 Create new Dictionary with instances by generic type and set up all called reader columns into new instances properties or fields.
 If reader has no rows, empty list is returned.
 </summary>
 <typeparam name="ResultItemType">Result list item generic type.</typeparam>
 <param name="reader">Reader with values for new instance properties and fields</param>
 <param name="closeReaderAfterSetUp">Automaticly close reader after all.</param>
 <returns></returns>
</member>
<member name="M:Database.Model.ToDictionary``2(System.Data.Common.DbDataReader,System.String,System.Boolean,System.Boolean)">
 <summary>
 Create new Dictionary with keys by first generic type and instances (values) by second generic type 
 and set up all called reader columns into new instances properties or fields. By first param as string,
 specify which column from reader to use to complete dictionary keys.
 If reader has no rows, empty dictionary is returned.
 </summary>
 <typeparam name="ResultItemKeyType">Result dictionary generic type to complete dictionary keys.</typeparam>
 <typeparam name="ResultItemValueType">Result dictionary generic type to complete dictionary values.</typeparam>
 <param name="reader">Reader with values for new instance properties and fields</param>
 <param name="keyColumnName">Reader column name to use to complete result dictionary keys.</param>
 <param name="throwExceptionInDuplicateKey">True to thrown Exception if any previous key will be founded by filling the result, false to overwrite any previous value.</param>
 <param name="closeReaderAfterSetUp">Automaticly close reader after all.</param>
 <returns></returns>
</member>
<member name="M:Database.Model.SetUp(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
 <summary>
 Set up all data from dictionary into instance properties or fields without touching .
 </summary>
 <param name="data">Dictionary with any values, named as instance fields and properties.</param>
 <param name="doNotTouch">True to not fill anything in touched dictionary.</param>
</member>
<member name="M:Database.Model._readerRowToInstance(System.Data.Common.DbDataReader,System.Collections.Generic.List{System.String},Database.Model@)">
 <summary>
 Set up current reader row columns into instance properties and fields.
 </summary>
 <param name="reader">DbDataReader with current row moved, where current row will be used to fill instance properties and fields.</param>
 <param name="columns">Columns in reader in proper order.</param>
 <param name="instance">Instance to fill.</param>
</member>
<member name="M:Database.Model._getReaderRowColumns(System.Data.Common.DbDataReader)">
 <summary>
 Get column names from reader as list of strings.
 </summary>
 <param name="reader"></param>
 <returns></returns>
</member>
<member name="T:Database.Command.CmdType">
 <summary>
 Current command provider type.
 </summary>
</member>
<member name="F:Database.Command.cmd">
 <summary>
 Currently prepared and executed Sql command.
 </summary>
</member>
<member name="F:Database.Command.type">
 <summary>
 Currently prepared and executed Sql command type by database provider.
 </summary>
</member>
<member name="F:Database.Command.reader">
 <summary>
 Currently executed reader from command.
 </summary>
</member>
<member name="M:Database.Command.Prepare(System.String)">
 <summary>
 Prepare database SQL statement. All params name with '@' char at the beginning of param name.
 </summary>
 <param name="sql">SQL statement.</param>
 <returns>Command instance.</returns>
</member>
<member name="M:Database.Command.Prepare(System.String,System.Int32)">
 <summary>
 Prepare database SQL statement. All params name with '@' char at the beginning of param name.
 </summary>
 <param name="sql">SQL statement.</param>
 <param name="connectionIndex">Config connection index to use different database, default by 0 to use first connection in &lt;connectionStrings&gt; list.</param>
 <returns>Command instance.</returns>
</member>
<member name="M:Database.Command.Prepare(System.String,System.String)">
 <summary>
 Prepare database SQL statement. All params name with '@' char at the beginning of param name.
 </summary>
 <param name="sql">SQL statement.</param>
 <param name="connectionName">Config connection index to use different database, default by 'DefaultConnection' to use default connection in &lt;connectionStrings&gt; list.</param>
 <returns>Command instance.</returns>
</member>
<member name="M:Database.Command.Prepare(System.String,System.Data.Common.DbTransaction)">
 <summary>
 Prepare database SQL statement. All params name with '@' char at the beginning of param name.
 </summary>
 <param name="sql">SQL statement.</param>
 <param name="transaction">Database connection transaction to execute this SQL command in.</param>
 <returns>Command instance.</returns>
</member>
<member name="M:Database.Command.Prepare(System.String,System.Data.SqlClient.SqlTransaction,System.Int32)">
 <summary>
 Prepare database SQL statement. All params name with '@' char at the beginning of param name.
 </summary>
 <param name="sql">SQL statement.</param>
 <param name="transaction">Database connection transaction to execute this SQL command in.</param>
 <param name="connectionIndex">Database connection config index.</param>
 <returns>Command instance.</returns>
</member>
<member name="M:Database.Command.Prepare(System.String,System.Data.SqlClient.SqlTransaction,System.String)">
 <summary>
 Prepare database SQL statement. All params name with '@' char at the beginning of param name.
 </summary>
 <param name="sql">SQL statement.</param>
 <param name="transaction">Database connection transaction to execute this SQL command in.</param>
 <param name="connectionName">Database connection config name.</param>
 <returns>Command instance.</returns>
</member>
<member name="M:Database.Command.Prepare(System.String,System.Data.Common.DbTransaction,System.Data.Common.DbConnection)">
 <summary>
 Prepare database SQL statement. All params name with '@' char at the beginning of param name.
 </summary>
 <param name="sql">SQL statement.</param>
 <param name="transaction">Database connection transaction to execute this SQL command in.</param>
 <param name="connection">Database connection to use..</param>
 <returns>Command instance.</returns>
</member>
<member name="M:Database.Command.FetchOne">
 <summary>
 Get first row from select result.
 </summary>
 <returns>Opened database reader.</returns>
</member>
<member name="M:Database.Command.FetchOne(System.Object)">
 <summary>
 Get first row from select result.
 </summary>
 <param name="sqlParams">Anonymous object with named values as SQL statement params.</param>
 <returns>Opened database reader.</returns>
</member>
<member name="M:Database.Command.FetchOne(System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Get first row from select result.
 </summary>
 <param name="sqlParams">Dictionary with named values as SQL statement params, do not use any '@' chars for dictionary keys.</param>
 <returns>Opened database reader.</returns>
</member>
<member name="M:Database.Command.FetchAll">
 <summary>
 Get all rows from select result.
 </summary>
 <returns>Opened database reader.</returns>
</member>
<member name="M:Database.Command.FetchAll(System.Data.CommandBehavior)">
 <summary>
 Get all rows from select result.
 </summary>
 <param name="commandBehavior">Database reader command behaviour.</param>
 <returns>Opened database reader.</returns>
</member>
<member name="M:Database.Command.FetchAll(System.Object,System.Data.CommandBehavior)">
 <summary>
 Get all rows from select result.
 </summary>
 <param name="sqlParams">Anonymous object with named values as SQL statement params.</param>
 <param name="commandBehavior">Database reader command behaviour.</param>
 <returns>Opened database reader.</returns>
</member>
<member name="M:Database.Command.FetchAll(System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandBehavior)">
 <summary>
 Get all rows from select result.
 </summary>
 <param name="sqlParams">Dictionary with named values as SQL statement params, do not use any '@' chars for dictionary keys.</param>
 <param name="commandBehavior">Database reader command behaviour.</param>
 <returns>Opened database reader.</returns>
</member>
<member name="M:Database.Command.GetReader">
 <summary>
 Get currently used database reader.
 </summary>
 <returns>Currently used database reader.</returns>
</member>
<member name="M:Database.Command.ToValue``1">
 <summary>
 Convert single row and single column select result into desired type specified by generic argument.
 </summary>
 <typeparam name="ResultType">Result variable type.</typeparam>
 <returns>Retyped single row and single column select result.</returns>
</member>
<member name="M:Database.Command.ToInstance``1">
 <summary>
 Create new instance by generic type and set up all called dictionary keys into new instance properties or fields.
 </summary>
 <typeparam name="InstanceResultType">New instance type.</typeparam>
 <returns>New instance by generic type with values by generic param.</returns>
</member>
<member name="M:Database.Command.ToList``1">
 <summary>
 Create new List with instances by generic type and set up all called reader columns into new instances properties or fields.
 If reader has no rows, empty list is returned.
 </summary>
 <typeparam name="ItemInstanceResultType">Result list item generic type.</typeparam>
 <returns></returns>
</member>
<member name="M:Database.Command.ToDictionary``2(System.String,System.Boolean)">
 <summary>
 Create new Dictionary with keys by first generic type and instances (values) by second generic type 
 and set up all select result columns into new instances properties or fields. By first param as string,
 specify which column from select result to use to complete dictionary keys.
 If select result has no rows, empty dictionary is returned.
 </summary>
 <typeparam name="ItemKeyType">Result dictionary generic type to complete dictionary keys.</typeparam>
 <typeparam name="ItemInstanceResultType">Result dictionary generic type to complete dictionary values.</typeparam>
 <param name="keyColumnName">Reader column name to use to complete result dictionary keys.</param>
 <param name="throwExceptionInDuplicateKey">True to thrown Exception if any previous key will be founded by filling the result, false to overwrite any previous value.</param>
 <returns></returns>
</member>
<member name="M:Database.Command.Exec">
 <summary>
 Execute any non select SQL statement and return affected rows count.
 </summary>
 <returns>Affected rows count</returns>
</member>
<member name="M:Database.Command.Exec(System.Object)">
 <summary>
 Execute any non select SQL statement and return affected rows count.
 </summary>
 <param name="sqlParams">Anonymous object with named values as SQL statement params.</param>
 <returns>Affected rows count</returns>
</member>
<member name="M:Database.Command.Exec(System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Execute any non select SQL statement and return affected rows count.
 </summary>
 <param name="sqlParams">Dictionary with named values as SQL statement params, do not use any '@' chars for dictionary keys.</param>
 <returns>Affected rows count</returns>
</member>
<member name="M:Database.Connection.#cctor">
 <summary>
 Load config and set up connection strings.
 </summary>
</member>
<member name="M:Database.Connection.Get(System.Int32)">
 <summary>
 Get and open connection by config index.
 </summary>
 <param name="connectionIndex">Config connection index.</param>
 <returns></returns>
</member>
<member name="M:Database.Connection.Get(System.String)">
 <summary>
 Get and open connection by config name.
 </summary>
 <param name="connectionName">Config connection name.</param>
 <returns></returns>
</member>
<member name="M:Database.Connection.Close">
 <summary>
 Close and drop all connections for current process and thread.
 Call this method always at thread end.
 </summary>
</member>
<member name="M:Database.Connection.Close(System.Int32)">
 <summary>
 Close and drop connection by config index for current process and thread.
 Call this method always after you have loaded all from any secondary database.
 </summary>
 <param name="connectionIndex">Config connection index.</param>
</member>
<member name="M:Database.Connection.Close(System.String)">
 <summary>
 Close and drop connection by config name for current process And thread.
 Call this method always after you have loaded all from any secondary database.
 </summary>
 <param name="connectionName">Config connection name.</param>
</member>
<member name="M:Database.Connection.Close(System.Int32,System.Int32,System.Int32)">
 <summary>
 Close and drop connection by config index for specificly called process and thread.
 Call this method only if you know what you are doing:-)
 </summary>
 <param name="connectionIndex">Config connection index.</param>
 <param name="processId">Specific process id.</param>
 <param name="threadId">Specific thread id.</param>
</member>
<member name="M:Database.Connection.CloseAllInProcess(System.Int32)">
 <summary>
 Close and drop connections for specificly called process.
 </summary>
</member>
<member name="M:Database.Connection.BeginTransaction(System.String,System.Data.IsolationLevel)">
 <summary>
 Create and begin transaction on first config connection.
 </summary>
 <param name="transactionName">Transaction name.</param>
 <param name="isolationLevel">Transaction isolation level.</param>
 <returns>New transaction.</returns>
</member>
<member name="M:Database.Connection.BeginTransaction(System.Int16,System.String,System.Data.IsolationLevel)">
 <summary>
 Create and begin transaction on specified connection config index.
 </summary>
 <param name="connectionIndex">Config connection index.</param>
 <param name="transactionName">Transaction name.</param>
 <param name="isolationLevel">Transaction isolation level.</param>
 <returns>New transaction.</returns>
</member>
<member name="M:Database.Connection.BeginTransaction(System.String,System.String,System.Data.IsolationLevel)">
 <summary>
 Create and begin transaction on specified connection config name.
 </summary>
 <param name="connectionName">Config connection name.</param>
 <param name="transactionName">Transaction name.</param>
 <param name="isolationLevel">Transaction isolation level.</param>
 <returns>New transaction.</returns>
</member>
<member name="M:Database.Connection.addErrorHandler(System.Data.Common.DbConnection)">
 <summary>
 Add InfoMessage handler for opened connection to to log SQL errors.
 </summary>
 <param name="conn"></param>
</member>
</members>
</doc>
